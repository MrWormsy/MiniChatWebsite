<style>
    #messages {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    #messages li {
        padding: 5px 10px;
    }

    #messages li:nth-child(odd) {
        background: #eee;
    }

    p {
        padding: 0.25em;
    }

    .tooltip {
        position: relative;
        display: inline-block;
    }

    /* Tooltip text */
    .tooltip .tooltiptext {
        visibility: hidden;
        background-color: rgba(0, 0, 0, 0.75);
        color: #fff;
        text-align: center;
        padding: 5px 5px;
        border-radius: 6px;

        font-size: 12px;

        bottom: 120%;
        margin-left: 0%; /* Use half of the width (120/2 = 60), to center the tooltip */

        /* Position the tooltip text - see examples below! */
        position: absolute;
        z-index: 1;
    }

    /* Show the tooltip text when you mouse over the tooltip container */
    .tooltip:hover .tooltiptext {
        visibility: visible;
    }

    .tooltip .tooltiptext::after {
        content: " ";
        position: absolute;
        top: 100%; /* At the bottom of the tooltip */
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: rgba(0, 0, 0, 0.75) transparent transparent transparent;
    }


</style>

<div class="container">

    <section class="section">

        <div class="tile is-ancestor">
            <div class="tile is-parent" id="chart_box">
                <div class="tile is-child box">

                    <div class="field is-grouped">
                        <p class="control">
                            <input id="friend" autocomplete="true" class="input" type="text" placeholder="Add a friend">
                        </p>
                        <p class="control">
                            <a id="addFriend" class="button is-secondary">
                                <span class="icon"><i class="fas fa-users"></i></span>
                                <span>Add friend</span>
                            </a>
                        </p>
                    </div>

                <!--    <ul id="messages"></ul> -->
                    <div class="are-medium" id="messages" style="overflow:scroll; overflow-x: hidden;"></div>

                    <div class="field is-grouped">
                        <p class="control is-expanded">
                            <input id="m" autocomplete="off" class="input is-fullwidth" type="text" placeholder="Message">
                        </p>
                        <p class="control">
                            <a id="sendButton" class="button is-primary is-fullwidth">
                                <span class="icon"><i class="fas fa-paper-plane"></i></span>
                                <span>Send</span>
                            </a>
                        </p>
                    </div>

                </div>



            </div>

        </div>


    </section>



</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>
    const conversationId = "<%=conversationid%>";
    const senderId = "<%=session.userid%>";
    const username = "<%=session.username%>";

    // Set the size of the section
    document.getElementById("messages").style.height = window.screen.height / 1.7 + "px";

    // The socket variable
    const socket = io('/conversations');

    socket.emit('choose conversation', {conversationId: conversationId, userId: senderId, username: username});

    // We need to load all the previous content of the conversation

    // In a first time we only want the last 100
    $.getJSON('/api/messages/' + conversationId, function(messages) {
        messages.forEach(function (m) {
            writeMessage(m);
        })
    });

    // TODO DO PAGINATION TO RETRIEVE THE 100+ last messages

    // Write a message in the client browser
    function writeMessage(message) {
        //let element = `<p><span class="tag">new Date(message.timestamp).toLocaleString() + " " + message.username + " wrote " + message.content</span></p>`;
        //$('#messages').append(element);

        let messageUsername = message.username;

        // If we have that, this means the messages written are old messages thus the username is as follow


        //$('#messages').append($(`<p style="text-align: ${messageUsername === username ? 'right' : 'left'}">`).append($(`<div class="tags are-medium" style="text-align: ${messageUsername === username ? 'right' : 'left'}">`).append($(`<span class="tag is-rounded is-medium profile-pic">O</span>`)).append($(`<span class="tag is-rounded is-medium ${messageUsername === username ? 'is-success' : 'is-info'}">`).text(new Date(message.timestamp).toLocaleString() + " " + messageUsername + " wrote " + message.content))));

        if (!message.username === true) {
            messageUsername = message.senderId.username;
        }

        $('#messages').append($(`<p style="text-align: ${messageUsername === username ? 'right' : 'left'}">`).append($(`<span class="tag tooltip is-rounded is-medium ${messageUsername === username ? 'is-success' : 'is-info'}">`).text(message.content).append($(`<span class="tooltiptext">`).text(new Date(message.timestamp).toGMTString().replace(" GMT", "") + ", " + `${messageUsername === username ? 'you' : username}` + " said"))));

        // Scroll to botom
        var objDiv = document.getElementById("messages");
        objDiv.scrollTop = objDiv.scrollHeight;

        //$('#messages').append($(`<p style="text-align: ${messageUsername === username ? 'right' : 'left'}">`).append($(`<span class="tag is-rounded is-medium profile-pic">O</span>`)).append($(`<span class="tag is-rounded is-medium ${messageUsername === username ? 'is-success' : 'is-info'}">`).text(new Date(message.timestamp).toLocaleString() + " " + messageUsername + " wrote " + message.content)));
    }

    function emitMessage(message) {

        // Format the message to suit the database
        let messageToSend = {timestamp: Date.now(), conversationId: conversationId, senderId: senderId, username: username, content: message};

        // Emit from this socket to the server and the server will do the rest
        socket.emit('chat message', messageToSend);
    }

    $(function () {

        // When the user press enter on the message input we send it
        $('#m').keyup(function (e) {
            if (e.keyCode == 13) {
                $('#sendButton').click();
            }
        });

        // When we click the button
        $('#sendButton').click(function (e) {
            e.preventDefault(); // prevents page reloading

            // We check that the message is not empty
            if ($('#m').val() === '') {
                return;
            }

            emitMessage($('#m').val());

            $('#m').val('');
            return false;
        });

        // When the socket receives the 'chat message event'
        socket.on('chat message', function (msg) {
            writeMessage(msg);
            //$('#messages').append($('<li>').text(new Date(msg.timestamp).toLocaleString() + " " + msg.username + " wrote " + msg.content));
        });

        // When a user join the chat
        socket.on('user joined', function (message) {
            $('#messages').append($('<span style="display: flex; justify-content: center; background: white;" class="tag is-centered">').text(message + " has joined the chat"));
        })

        // When a user join the chat
        socket.on('user quit', function (message) {
            $('#messages').append($('<span style="display: flex; justify-content: center; background: white;" class="tag is-centered">').text(message + " has quit the chat"));
        })

        // When we want to update the list of online users
        // TODO ISSUE HERE, THIS DO NOT TRIGGERS
        socket.on('users online', function (message) {
            console.log(message);
        })
    });
</script>


